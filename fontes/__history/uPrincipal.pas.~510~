unit uPrincipal;

interface

{$Region 'Uses'}
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Vcl.ExtCtrls, Vcl.ComCtrls,
  Vcl.Buttons, Vcl.StdCtrls, Data.DB, Vcl.Grids, Vcl.DBGrids, Vcl.WinXPanels,
  Vcl.Mask, Vcl.DBCtrls, System.ImageList, Vcl.ImgList, Data.FMTBcd, Data.SqlExpr;
{$EndRegion}


{$Region 'Types'}
type
  TPrincipal = class(TForm)
    ImageList: TImageList;
    DtSrcOperadora: TDataSource;
    DtSrcCliente_Telefone: TDataSource;
    DtSrcCliente: TDataSource;
    PcPrincipal: TPageControl;
    TsCadastroEdicao: TTabSheet;
    CadPnlTelefone: TPanel;
    CadGrdPnlTelefone: TGridPanel;
    CadBtnSalvarTelefone: TButton;
    CadMkEdtTelefone: TMaskEdit;
    CadCbBoxOperadora: TComboBox;
    CadPnlPrincipal: TPanel;
    CadPnlForm: TPanel;
    CadLblNome: TLabel;
    CadLblCPF: TLabel;
    CadLblEmail: TLabel;
    CadLblDataNascimento: TLabel;
    CadLblDataHora: TLabel;
    CadLblRemovido: TLabel;
    CadDBEdtNome: TDBEdit;
    CadDBEdtCPF: TDBEdit;
    CadDBEdtEmail: TDBEdit;
    CadDBEdtDataNascimento: TDBEdit;
    CadDBEdtDataHora: TDBEdit;
    CadDBEdtRemovido: TDBEdit;
    CadBtnSalvar: TButton;
    CadBtnNovo: TButton;
    CadDBGrdForm: TDBGrid;
    CadPnlTitulo: TPanel;
    TsConsulta: TTabSheet;
    ConsPnlTitulo: TPanel;
    ConsPnlTelefone: TPanel;
    ConsSpdBtnExcluirTelefone: TSpeedButton;
    ConsDBGrdTelefone: TDBGrid;
    ConsLblPesquisar: TEdit;
    ConsPnlCardCliente: TPanel;
    ConsEdtNome: TEdit;
    ConsEdtDataHora: TEdit;
    ConsEdtCPF: TEdit;
    ConsEdtDataNascimento: TEdit;
    ConsBtnEditar: TButton;
    ConsEdtEmail: TEdit;
    ConsBtnPesquisar: TButton;
    Button1: TButton;
    Button2: TButton;
    procedure FormCreate(Sender: TObject);
    procedure CadBtnSalvarTelefoneClick(Sender: TObject);
    procedure CadMkEdtOperadoraKeyPress(Sender: TObject; var Key: Char);
    procedure CadMkEdtTelefoneExit(Sender: TObject);
    procedure CadMkEdtTelefoneEnter(Sender: TObject);
    procedure CadBtnNovoClick(Sender: TObject);
    procedure CadBtnSalvarClick(Sender: TObject);


{$EndRegion}

  private

  public
    { Public declarations }
  end;

var
  Principal: TPrincipal;
  Count, TopPos: Integer;


implementation

{$R *.dfm}

uses
  uConexaoBD;


procedure TPrincipal.FormCreate(Sender: TObject);
begin
  Count := 0;
  TopPos := 33;
end;

procedure TPrincipal.CadBtnNovoClick(Sender: TObject);
begin
  uConexaoBD.DMConexaoBD.QryOperadora.Active := True;
  uConexaoBD.DMConexaoBD.QryCliente.Active := True;
  uConexaoBD.DMConexaoBD.QryCliente.Append;

  CadMkEdtTelefone.Enabled := True;
  CadCbBoxOperadora.Enabled := True;
  CadBtnSalvarTelefone.Enabled := True;
  CadDBEdtDataHora.Enabled := True;
  CadDBEdtRemovido.Enabled := True;
  CadDBEdtNome.Enabled := True;
  CadDBEdtEmail.Enabled := True;
  CadDBEdtCPF.Enabled := True;
  CadDBEdtDataNascimento.Enabled := True;
  CadBtnSalvar.Enabled := True;

  CadDBEdtNome.SetFocus;
end;

procedure TPrincipal.CadBtnSalvarClick(Sender: TObject);
begin
  uConexaoBD.DMConexaoBD.QryClienteData_Hora.Value := now;
  uConexaoBD.DMConexaoBD.QryClienteRemovido.Value := 'Não';
  uConexaoBD.DMConexaoBD.QryCliente.Post;
end;

procedure TPrincipal.CadBtnSalvarTelefoneClick(Sender: TObject);
var
  Operadora: TDBEdit;
  Telefone: TDBEdit;
  Salvar: TButton;

begin

  if Count > 5 then
  begin
    ShowMessage('Limite atingido!');
    Exit;
  end;

  uConexaoBD.DMConexaoBD.QryOperadora.Append;
  uConexaoBD.DMConexaoBD.QryOperadoraData_Hora.Value := now;
  uConexaoBD.DMConexaoBD.QryOperadoraOperadora.Value := CadCbBoxOperadora.Text;
  uConexaoBD.DMConexaoBD.QryOperadora.Post;

  if Count > 0 then
    TopPos := TopPos + 30;
    Inc(Count);

  Telefone := TDBEdit.Create(self);
    Telefone.Parent := Principal.CadGrdPnlTelefone;
    Telefone.Width := 100;
    Telefone.DataSource := DtSrcCliente_Telefone;

  Operadora := TDBEdit.Create(self);
    Operadora.Parent := Principal.CadGrdPnlTelefone;
    Operadora.Width := 69;
    Operadora.DataSource := DtSrcOperadora;
    Operadora.DataField := 'Operadora';

  Salvar := TButton.Create(self);
    Salvar.Parent := Principal.CadGrdPnlTelefone;
    Salvar.Images := ImageList;
    Salvar.ImageIndex := 0;
    (*Criar o evento para Deletar elemento*)


  CadMkEdtTelefone.Clear;
  CadCbBoxOperadora.Clear;
  CadMkEdtTelefone.SetFocus;

end;

// máscara da operadora.
procedure TPrincipal.CadMkEdtOperadoraKeyPress(Sender: TObject; var Key: Char);
begin
  if not(key in ['A'..'Z','a'..'z', #8]) then
    Key := #0;
end;


// funcao que retorna somente numeros
function FncSomenteNumeros(AString: String): String;
var
  I : Integer;
  Texto : String;
begin
  Texto := '';

  for I := 1 to Length(AString) do
  begin
    if Pos( Copy(AString, I, 1 ), '0123456789' ) <> 0 then
      Texto := Texto + Copy( AString, i, 1 );
  end;

  Result := Texto;

end;

// inserir mascara do telefone
procedure TPrincipal.CadMkEdtTelefoneExit(Sender: TObject);
begin

  if Length(fncSomenteNumeros(CadMkEdtTelefone.Text)) = 10 then
  begin
    CadMkEdtTelefone.EditMask := '(00)0000-000;0;_';

  end

  else
  if Length(fncSomenteNumeros(CadMkEdtTelefone.Text)) = 11 then
  begin
    CadMkEdtTelefone.EditMask := '(00)00000-000;0;_';

  end

  else
  if Length(fncSomenteNumeros(CadMkEdtTelefone.Text)) <> 0 then
  begin
    ShowMessage('Número inválido!');
    CadMkEdtTelefone.SetFocus;
    abort;
  end;

end;

// limpar mascara do telefone
procedure TPrincipal.CadMkEdtTelefoneEnter(Sender: TObject);
begin
  CadMkEdtTelefone.EditMask := '';
end;


end.


